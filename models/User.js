// models/User.js

const sqlite3 = require('sqlite3').verbose();
const db = require('config/db');
const logger = require('logger');

const User = {
    // === –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ ===
    findByUsername: async function(username) {
        logger.debug(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏: ${username}`);
        return new Promise((resolve, reject) => {
            db.get('SELECT * FROM users WHERE username = ?', [username], (err, row) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                    return reject(err);
                }
                resolve(row);
            });
        });
    },

    // === –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
    create: async function(username, hashedPassword) {
        logger.info(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
        return new Promise((resolve, reject) => {
            db.run(
                'INSERT INTO users (username, password_hash) VALUES (?, ?)',
                [username, hashedPassword],
                function (err) {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, ID: ${this.lastID}`);
                    resolve({ id: this.lastID });
                }
            );
        });
    },

    // === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID ===
    findById: async function(id) {
        logger.debug(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: ${id}`);
        return new Promise((resolve, reject) => {
            db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: ${err.message}`);
                    return reject(err);
                }
                resolve(row);
            });
        });
    },

    // === –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
    getAll: async function() {
        logger.debug(`üìö –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        return new Promise((resolve, reject) => {
            db.all('SELECT id, username, created_at FROM users', [], (err, rows) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${err.message}`);
                    return reject(err);
                }
                resolve(rows);
            });
        });
    }
};

module.exports = User;