// controllers/authController.js

const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const db = require('db');
const winston = require('services/logger');
const { generateVerificationCode, sendVerificationEmail } = require('services/emailService');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JWT
const JWT_CONFIG = {
    expiresIn: '1h',
    issuer: 'your-app-name'
};

async function register(req, res) {
    const { username, contact, password_hash } = req.body;

    if (!username || !password_hash || !contact) {
        winston.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        return res.status(400).json({ error: '–ò–º—è, –ø–∞—Ä–æ–ª—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    let email = null;
    let phone = null;

    if (contact.includes('@')) {
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(contact)) {
            winston.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' });
        }
        email = contact.trim().toLowerCase();
    } else {
        if (!/^\+?[0-9]{10,15}$/.test(contact)) {
            winston.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω');
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω' });
        }
        phone = contact.trim();
    }

    try {
        const userExists = await new Promise((resolve, reject) => {
            db.get(
                `SELECT id FROM users WHERE username = ? OR email = ? OR phone = ?`,
                [username.trim(), email, phone],
                (err, row) => err ? reject(err) : resolve(row)
            );
        });

        if (userExists) {
            winston.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${username}`);
            return res.status(409).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        const hashedPassword = await bcrypt.hash(password_hash, 10);
        const verificationCode = generateVerificationCode();

        const userId = await new Promise((resolve, reject) => {
            db.run(
                `INSERT INTO users 
                (username, email, phone, password_hash, role, verification_code, is_verified) 
                VALUES (?, ?, ?, ?, ?, ?, ?)`,
                [
                    username.trim(),
                    email,
                    phone,
                    hashedPassword,
                    'user',
                    verificationCode,
                    email ? 0 : 1 // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç email
                ],
                function (err) {
                    if (err) {
                        winston.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${err.message}`);
                        return reject(err);
                    }
                    winston.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
                    resolve(this.lastID);
                }
            );
        });

        const emailSent = email ? await sendVerificationEmail(email, verificationCode) : true;

        if (!emailSent) {
            await new Promise((resolve, reject) => {
                db.run('DELETE FROM users WHERE id = ?', [userId], (err) => {
                    if (err) {
                        winston.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ${err.message}`);
                        reject(err);
                    } else {
                        winston.warn(`‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email`);
                        resolve();
                    }
                });
            });
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
        }

        winston.info(`üìß –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email || phone}`);

        return res.status(201).json({
            success: true,
            message: email ? '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' : '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã',
            contact: email || phone,
            userId
        });

    } catch (err) {
        winston.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${err.message}`, { error: err });
        return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
}

async function login(req, res) {
    const { login, password_hash } = req.body;

    if (!login || !password_hash) {
        winston.warn('‚ö†Ô∏è –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const normalizedLogin = login.trim();

        const user = await new Promise((resolve, reject) => {
            db.get(
                `SELECT id, username, email, phone, password_hash, role, is_active, is_verified 
                 FROM users 
                 WHERE username = ? OR email = ? OR phone = ?`,
                [normalizedLogin, normalizedLogin.toLowerCase(), normalizedLogin],
                (err, row) => err ? reject(err) : resolve(row)
            );
        });

        if (!user) {
            winston.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        if (!user.is_active) {
            winston.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: ${user.username}`);
            return res.status(403).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' });
        }

        if (!user.is_verified) {
            winston.warn(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${user.username}`);
            return res.status(403).json({
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                needs_verification: true,
                contact: user.email || user.phone
            });
        }

        const passwordMatch = await bcrypt.compare(password_hash, user.password_hash);

        if (!passwordMatch) {
            winston.warn(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        const token = jwt.sign(
            {
                id: user.id,
                username: user.username,
                email: user.email,
                phone: user.phone,
                role: user.role
            },
            process.env.JWT_SECRET || 'supersecretkey123',
            JWT_CONFIG
        );

        winston.info(`üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É`);

        return res.json({
            success: true,
            token,
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                phone: user.phone,
                role: user.role,
                is_verified: user.is_verified
            }
        });

    } catch (err) {
        winston.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${err.message}`, { error: err });
        return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
}

async function verifyEmail(req, res) {
    const { contact, code } = req.body;

    if (!contact || !code) {
        winston.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∫–æ–¥ –ø—É—Å—Ç—ã–µ');
        return res.status(400).json({ error: '–ö–æ–Ω—Ç–∞–∫—Ç –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const normalizedContact = contact.trim().toLowerCase();

        const user = await new Promise((resolve, reject) => {
            db.get(
                `SELECT id, verification_code, is_verified, email, phone 
                 FROM users 
                 WHERE email = ? OR phone = ?`,
                [normalizedContact, normalizedContact],
                (err, row) => err ? reject(err) : resolve(row)
            );
        });

        if (!user) {
            winston.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (user.is_verified) {
            winston.warn('‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω');
            return res.status(400).json({ error: '–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
        }

        if (user.verification_code !== code) {
            winston.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
        }

        await new Promise((resolve, reject) => {
            db.run(
                `UPDATE users SET is_verified = 1, verification_code = NULL WHERE id = ?`,
                [user.id],
                (err) => err ? reject(err) : resolve()
            );
        });

        const updatedUser = await new Promise((resolve, reject) => {
            db.get(
                'SELECT id, username, email, phone, role FROM users WHERE id = ?',
                [user.id],
                (err, row) => err ? reject(err) : resolve(row)
            );
        });

        const token = jwt.sign(
            {
                id: updatedUser.id,
                username: updatedUser.username,
                email: updatedUser.email,
                phone: updatedUser.phone,
                role: updatedUser.role
            },
            process.env.JWT_SECRET || 'supersecretkey123',
            JWT_CONFIG
        );

        winston.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${updatedUser.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email/—Ç–µ–ª–µ—Ñ–æ–Ω`);

        return res.json({
            success: true,
            token,
            user: {
                id: updatedUser.id,
                username: updatedUser.username,
                email: updatedUser.email,
                phone: updatedUser.phone,
                role: updatedUser.role,
                is_verified: true
            }
        });

    } catch (err) {
        winston.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${err.message}`, { error: err });
        return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
}

module.exports = {
    register,
    login,
    verifyEmail
};