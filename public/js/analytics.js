// routes/analyticsRoutes.js

const express = require('express');
const db = require('db');
const axios = require('axios');
const winston = require('services/logger');
require('dotenv').config();

const router = express.Router();
const { wrapAsync } = require('controllers/baseController');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
router.use((req, res, next) => {
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Cache-Control', 'no-store');
    next();
});

// === –†–æ—É—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===
router.get('/', wrapAsync(async (req, res) => {
    winston.info('‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
        winston.warn('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π
    winston.info('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    await checkAndUpdateResults();

    // 3. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –º–∞—Ç—á–∞–º
    winston.info('üìä –†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const analyticsData = await calculateUserAnalytics();

    if (!analyticsData.length) {
        winston.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return res.status(404).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }

    winston.info(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${analyticsData.length} –∑–∞–ø–∏—Å–µ–π`);
    return res.json(analyticsData);
}));

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

async function checkAndUpdateResults() {
    const lastUpdate = await new Promise((resolve, reject) => {
        db.get('SELECT updated_at FROM results ORDER BY updated_at DESC LIMIT 1', (err, row) => {
            if (err) {
                winston.error(`‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${err.message}`);
                reject(err);
            } else {
                resolve(row?.updated_at);
            }
        });
    });

    const oneHourAgo = new Date(Date.now() - 3600000);
    const needsUpdate = !lastUpdate || new Date(lastUpdate) < oneHourAgo;

    if (needsUpdate) {
        winston.info('üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        await updateMatchResults();
    } else {
        winston.info('üïí –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
}

async function calculateUserAnalytics() {
    winston.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    const users = await new Promise((resolve, reject) => {
        db.all(`
            SELECT DISTINCT username 
            FROM predictions 
            WHERE username IS NOT NULL 
              AND username != ''
              AND TRIM(username) != ''
        `, (err, rows) => {
            if (err) {
                winston.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${err.message}`);
                reject(err);
            } else {
                resolve(rows.map(row => row.username).filter(Boolean));
            }
        });
    });

    if (!users.length) {
        winston.warn('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏');
        return [];
    }

    winston.info(`üìù –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    const statsPromises = users.map(username => getUserStats(username));
    const results = await Promise.all(statsPromises);

    return results.filter(Boolean); // —Ñ–∏–ª—å—Ç—Ä—É–µ–º null
}

async function getUserStats(username) {
    winston.info(`üìä –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${username}`);

    if (!username || username.trim() === '') {
        winston.warn(`‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return null;
    }

    const predictions = await new Promise((resolve, reject) => {
        const query = `
            SELECT p.match_id, p.forecast, r.home_goals, r.away_goals
            FROM predictions p
            JOIN results r ON p.match_id = r.match_id
            WHERE p.username = ? 
              AND r.home_goals IS NOT NULL 
              AND r.away_goals IS NOT NULL
        `;
        db.all(query, [username], (err, rows) => {
            if (err) {
                winston.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è ${username}: ${err.message}`);
                reject(err);
            } else {
                resolve(rows || []);
            }
        });
    });

    const stats = {
        username,
        totalPredictions: 0,
        finishedPredictions: predictions.length,
        correct: 0,
        partial: 0,
        wrong: 0,
        accuracyPercentage: 0,
        rating: 0
    };

    const totalCount = await new Promise((resolve, reject) => {
        db.get('SELECT COUNT(*) as count FROM predictions WHERE username = ?', [username], (err, row) => {
            if (err) {
                winston.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è ${username}: ${err.message}`);
                reject(err);
            } else {
                resolve(row?.count || 0);
            }
        });
    });

    stats.totalPredictions = totalCount;

    predictions.forEach(pred => {
        const { home_goals, away_goals, forecast } = pred;
        const [userHome, userAway] = forecast.split(':').map(Number);

        if (userHome === home_goals && userAway === away_goals) {
            stats.correct++;
        } else {
            const userOutcome = Math.sign(userHome - userAway);
            const actualOutcome = Math.sign(home_goals - away_goals);
            if (userOutcome === actualOutcome) {
                stats.partial++;
            } else {
                stats.wrong++;
            }
        }
    });

    if (stats.finishedPredictions > 0) {
        stats.accuracyPercentage = Math.round(((stats.correct + stats.partial) / stats.finishedPredictions) * 100);
        stats.rating = stats.correct * 3 + stats.partial;
    }

    winston.info(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${username} –≥–æ—Ç–æ–≤–∞`);
    return stats;
}

async function updateMatchResults() {
    winston.info('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π');

    const unfinishedMatches = await new Promise((resolve, reject) => {
        db.all(`
            SELECT DISTINCT p.match_id, m.homeTeam, m.awayTeam 
            FROM predictions p
            LEFT JOIN results r ON p.match_id = r.match_id
            LEFT JOIN matches m ON p.match_id = m.match_id
            WHERE r.home_goals IS NULL OR r.away_goals IS NULL
        `, (err, rows) => {
            if (err) {
                winston.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${err.message}`);
                reject(err);
            } else {
                resolve(rows || []);
            }
        });
    });

    if (!unfinishedMatches.length) {
        winston.info('‚úÖ –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        return;
    }

    winston.info(`üîç –ù–∞–π–¥–µ–Ω–æ ${unfinishedMatches.length} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);

    const apiKey = process.env.API_KEY_SSTATS;
    if (!apiKey) {
        winston.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API_KEY_SSTATS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        throw new Error('API_KEY_SSTATS –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    let updatedCount = 0;

    for (const match of unfinishedMatches) {
        try {
            winston.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${match.match_id} (${match.homeTeam} vs ${match.awayTeam})`);

            const response = await axios.get(`https://api.sstats.net/games/${match.match_id}`,  {
                params: { apikey: apiKey },
                timeout: 10000
            });

            if (response.data?.status === 'OK') {
                const game = response.data.data.game;

                if (game.homeResult !== null && game.awayResult !== null) {
                    await new Promise((resolve, reject) => {
                        db.run(`
                            INSERT OR REPLACE INTO results 
                            (match_id, home_goals, away_goals, updated_at)
                            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                        `, [match.match_id, game.homeResult, game.awayResult], (err) => {
                            if (err) {
                                winston.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ ${match.match_id}: ${err.message}`);
                                reject(err);
                            } else {
                                winston.info(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ ${match.match_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
                                updatedCount++;
                                resolve();
                            }
                        });
                    });
                }
            }
        } catch (err) {
            winston.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞ ${match.match_id}: ${err.message}`);
        }
    }

    winston.info(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π`);
}

module.exports = router;