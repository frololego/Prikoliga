const express = require('express');
const router = express.Router();
const { authenticateToken } = require('middleware/authMiddleware');
const db = require('db');
const winston = require('logger');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const dbQuery = (query, params) => new Promise((resolve, reject) => {
    winston.debug(`Executing query: ${query} with params: ${JSON.stringify(params)}`);
    db.get(query, params, (err, row) => {
        if (err) {
            winston.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', err.message, { query, params });
            reject(err);
        } else {
            resolve(row);
        }
    });
});

const dbRun = (query, params) => new Promise((resolve, reject) => {
    winston.debug(`Executing query: ${query} with params: ${JSON.stringify(params)}`);
    db.run(query, params, function (err) {
        if (err) {
            winston.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', err.message, { query, params });
            reject(err);
        } else {
            resolve(this);
        }
    });
});

const dbAll = (query, params) => new Promise((resolve, reject) => {
    winston.debug(`Executing query: ${query} with params: ${JSON.stringify(params)}`);
    db.all(query, params, (err, rows) => {
        if (err) {
            winston.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', err.message, { query, params });
            reject(err);
        } else {
            resolve(rows || []);
        }
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/me', authenticateToken, async (req, res) => {
    try {
        res.setHeader('Cache-Control', 'no-store');
        const user = await dbQuery(
            `SELECT id, username, email, phone, role, is_verified,
            strftime('%Y-%m-%d %H:%M:%S', created_at) as created_at,
            strftime('%Y-%m-%d %H:%M:%S', updated_at) as updated_at
            FROM users WHERE id = ? AND is_deleted = 0`,
            [req.user.id]
        );

        if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return res.json(user);
    } catch (err) {
        winston.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', err.message, { error: err });
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/rename', authenticateToken, async (req, res) => {
    const { newUsername } = req.body;
    const { id: userId, username: currentUsername } = req.user;

    if (!newUsername || newUsername.length < 3)
        return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' });

    try {
        await db.serialize(async () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await dbQuery('SELECT id FROM users WHERE id = ? AND is_deleted = 0', [userId]);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
            const usernameExists = await dbQuery('SELECT id FROM users WHERE username = ? AND id != ?', [newUsername, userId]);
            if (usernameExists) {
                throw new Error('–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userUpdateResult = await dbRun(
                'UPDATE users SET username = ?, updated_at = datetime("now") WHERE id = ?',
                [newUsername, userId]
            );

            if (userUpdateResult.changes === 0) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö
            const predictionUpdateResult = await dbRun(
                'UPDATE predictions SET username = ? WHERE username = ?',
                [newUsername, currentUsername]
            );

            winston.info(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ "${newUsername}"`);
            return res.json({
                success: true,
                newUsername,
                message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
            });
        });
    } catch (err) {
        winston.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`, { error: err });
        if (!res.headersSent) {
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏' });
        }
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (soft delete)
router.delete('/delete', authenticateToken, async (req, res) => {
    const userId = req.user.id;
    const currentDate = new Date().toISOString();

    try {
        await db.serialize(async () => {
            const result = await dbRun(
                `UPDATE users SET 
                is_deleted = 1, deleted_at = ?, is_active = 0,
                username = username || '_deleted_' || ?, 
                email = email || '_deleted_' || ?,
                updated_at = datetime("now")
                WHERE id = ? AND is_deleted = 0`,
                [currentDate, userId, userId, userId]
            );

            if (result.changes === 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω');
            }

            winston.info(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
            return res.json({ success: true, message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' });
        });
    } catch (err) {
        winston.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', err.message, { error: err });
        const status = err.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω') ? 404 : 500;
        return res.status(status).json({ error: err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/update-phone', authenticateToken, async (req, res) => {
    const { phone } = req.body;
    const userId = req.user.id;

    const phoneRegex = /^\+?\d{10,15}$/;
    if (!phone || !phoneRegex.test(phone))
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (+79123456789)' });

    try {
        const existingUser = await dbQuery('SELECT id FROM users WHERE phone = ? AND id != ? AND is_deleted = 0', [phone, userId]);
        if (existingUser) return res.status(400).json({ error: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' });

        const result = await dbRun('UPDATE users SET phone = ?, updated_at = datetime("now") WHERE id = ?', [phone, userId]);
        if (result.changes === 0) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        return res.json({ success: true, message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', phone });
    } catch (err) {
        winston.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', err.message, { error: err });
        return res.status(500).json({ error: err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/predictions', authenticateToken, async (req, res) => {
    try {
        const predictions = await dbAll(`SELECT * FROM predictions WHERE username = ? AND is_deleted = 0`, [req.user.username]);
        return res.json(predictions);
    } catch (err) {
        winston.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message, { error: err });
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;