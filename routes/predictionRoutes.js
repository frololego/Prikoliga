const express = require('express');
const db = require('../db');
const axios = require('axios');
require('dotenv').config();

const router = express.Router();

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–º–µ—é—Ç Content-Type: application/json
router.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json');
  next();
});

// === –†–æ—É—Ç: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ ===
router.post('/', async (req, res) => {
    try {
        const { username, match_id, forecast } = req.body;
        
        if (!username || !match_id || !forecast) {
            console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", req.body);
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
        }

        const [homeGoals, awayGoals] = forecast.split(':');
        if (!/^\d+$/.test(homeGoals) || !/^\d+$/.test(awayGoals)) {
            console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –º–∞—Ç—á–∞ ${match_id}:`, forecast);
            return res.status(400).json({ error: '–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç "—á–∏—Å–ª–æ:—á–∏—Å–ª–æ"' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        const matchRow = await new Promise((resolve, reject) => {
            db.get('SELECT utcDate FROM matches WHERE match_id = ?', [match_id], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        if (!matchRow) {
            console.warn(`‚ö†Ô∏è –ú–∞—Ç—á ${match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
            return res.status(404).json({ error: '–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ' });
        }

        const matchDate = new Date(matchRow.utcDate);
        if (matchDate < new Date()) {
            console.warn(`‚ö†Ô∏è –ú–∞—Ç—á ${match_id} —É–∂–µ –Ω–∞—á–∞–ª—Å—è`);
            return res.status(400).json({ error: '–ú–∞—Ç—á —É–∂–µ –Ω–∞—á–∞–ª—Å—è. –ü—Ä–æ–≥–Ω–æ–∑ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è' });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        const result = await new Promise((resolve, reject) => {
            db.run(
                `INSERT INTO predictions (username, match_id, forecast, update_count) 
                 VALUES (?, ?, ?, 0)
                 ON CONFLICT(username, match_id) 
                 DO UPDATE SET 
                   forecast = excluded.forecast,
                   updated_at = CURRENT_TIMESTAMP,
                   update_count = update_count + 1`,
                [username, match_id, forecast],
                function(err) {
                    if (err) reject(err);
                    else resolve(this);
                }
            );
        });

        const message = result.changes === 1 ? '–ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω' : '–ü—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª—ë–Ω';
        console.log(`‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–∞—Ç—á–∞ ${match_id} (${forecast}) ${message}`);
        return res.json({ success: true, message });

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:`, err.message);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞' });
    }
});

// === –†–æ—É—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
router.get('/', async (req, res) => {
    try {
        const { username } = req.query;
        if (!username) {
            console.error("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ");
            return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ' });
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const allPredictions = await new Promise((resolve, reject) => {
            db.all(
                `SELECT p.*, m.homeTeam, m.awayTeam, m.utcDate AS matchDate, 
                 r.home_goals AS actualHome, r.away_goals AS actualAway 
                 FROM predictions p 
                 LEFT JOIN matches m ON p.match_id = m.match_id 
                 LEFT JOIN results r ON p.match_id = r.match_id 
                 WHERE p.username = ?`,
                [username],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });

        console.log(`‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è ${username} –∑–∞–≥—Ä—É–∂–µ–Ω—ã (${allPredictions.length})`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        const needsUpdate = await new Promise((resolve) => {
            db.get(
                `SELECT updated_at FROM results 
                 ORDER BY updated_at DESC LIMIT 1`,
                (err, row) => {
                    if (err) resolve(true);
                    else resolve(!row?.updated_at || new Date() - new Date(row.updated_at) > 3600000);
                }
            );
        });

        if (needsUpdate) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            await updateMatchResults(allPredictions);
        }

        return res.json(allPredictions);

    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:", err.message);
        return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã' });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function updateMatchResults(allPredictions) {
    // ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
}

module.exports = router;