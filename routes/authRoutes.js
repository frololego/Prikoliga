// routes/authRoutes.js

const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const db = require('db');
const { generateVerificationCode, sendVerificationEmail } = require('services/emailService');
const logger = require('logger');

const router = express.Router();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JWT
const JWT_CONFIG = {
    expiresIn: '1h',
    issuer: 'PRIKOLIGA'
};

// === Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ ===
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader?.split(' ')[1];

    if (!token) {
        logger.warn('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    jwt.verify(token, process.env.JWT_SECRET || 'supersecretkey123', (err, user) => {
        if (err) {
            logger.error(`üö´ –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${err.message}`);
            return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        if (!user.id) {
            logger.warn('‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return res.status(403).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID' });
        }
        req.user = user;
        next();
    });
}

// === –†–æ—É—Ç /register ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ===
router.post('/register', async (req, res) => {
    const { username, contact, password_hash } = req.body;

    if (!username || !password_hash || !contact) {
        logger.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è');
        return res.status(400).json({ error: '–ò–º—è, –ø–∞—Ä–æ–ª—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    let email = null;
    let phone = null;

    if (contact.includes('@')) {
        if (!contact.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
            logger.warn(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: ${contact}`);
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' });
        }
        email = contact.trim().toLowerCase();
    } else {
        if (!contact.match(/^\+?[0-9]{10,15}$/)) {
            logger.warn(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${contact}`);
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω' });
        }
        phone = contact.trim();
    }

    try {
        const userExists = await new Promise((resolve, reject) => {
            db.get(
                `SELECT id FROM users WHERE username = ? OR email = ? OR phone = ?`,
                [username.trim(), email, phone],
                (err, row) => {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    resolve(row);
                }
            );
        });

        if (userExists) {
            logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${username}`);
            return res.status(409).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        const hashedPassword = await bcrypt.hash(password_hash, 10);
        const verificationCode = generateVerificationCode();

        const userId = await new Promise((resolve, reject) => {
            db.run(
                `INSERT INTO users 
                (username, email, phone, password_hash, role, verification_code, is_verified) 
                VALUES (?, ?, ?, ?, ?, ?, ?)`,
                [
                    username.trim(),
                    email,
                    phone,
                    hashedPassword,
                    'user',
                    verificationCode,
                    email ? 0 : 1 // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç email
                ],
                function (err) {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, ID: ${this.lastID}`);
                    resolve(this.lastID);
                }
            );
        });

        const emailSent = email ? await sendVerificationEmail(email, verificationCode) : true;

        if (!emailSent) {
            await new Promise((resolve, reject) => {
                db.run('DELETE FROM users WHERE id = ?', [userId], (err) => {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    logger.warn(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞`);
                    resolve();
                });
            });
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
        }

        logger.info(`üìß –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${email || phone}`);

        res.status(201).json({
            success: true,
            message: email ? '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' : '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã',
            contact: email || phone,
            userId
        });
    } catch (err) {
        logger.error(`‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// === –†–æ—É—Ç /verify-email ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω ===
router.post('/verify-email', async (req, res) => {
    const { contact, code } = req.body;

    if (!contact || !code) {
        logger.warn('‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return res.status(400).json({ error: '–ö–æ–Ω—Ç–∞–∫—Ç –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const user = await new Promise((resolve, reject) => {
            db.get(
                `SELECT id, verification_code, is_verified, email, phone 
                 FROM users 
                 WHERE email = ? OR phone = ?`,
                [contact.trim().toLowerCase(), contact.trim()],
                (err, row) => {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    resolve(row);
                }
            );
        });

        if (!user) {
            logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${contact}`);
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (user.is_verified) {
            logger.info(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: ${contact}`);
            return res.status(400).json({ error: '–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
        }

        if (user.verification_code !== code) {
            logger.warn(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${contact}`);
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
        }

        await new Promise((resolve, reject) => {
            db.run(
                `UPDATE users SET is_verified = 1, verification_code = NULL WHERE id = ?`,
                [user.id],
                function (err) {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    logger.info(`‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: ${contact}`);
                    resolve();
                }
            );
        });

        const updatedUser = await new Promise((resolve, reject) => {
            db.get(
                'SELECT id, username, email, phone, role FROM users WHERE id = ?',
                [user.id],
                (err, row) => {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    resolve(row);
                }
            );
        });

        const token = jwt.sign(
            {
                id: updatedUser.id,
                username: updatedUser.username,
                email: updatedUser.email,
                phone: updatedUser.phone,
                role: updatedUser.role
            },
            process.env.JWT_SECRET || 'supersecretkey123',
            JWT_CONFIG
        );

        res.json({
            success: true,
            token,
            user: {
                id: updatedUser.id,
                username: updatedUser.username,
                email: updatedUser.email,
                phone: updatedUser.phone,
                role: updatedUser.role,
                is_verified: true
            }
        });

    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${err.message}`);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// === –†–æ—É—Ç /login ‚Äî –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ username, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω ===
router.post('/login', async (req, res) => {
    const { login, password_hash } = req.body;

    if (!login || !password_hash) {
        logger.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞: –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è');
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    const normalizedLogin = login.trim();

    try {
        const user = await new Promise((resolve, reject) => {
            db.get(
                `SELECT id, username, email, phone, password_hash, role, is_active, is_verified 
                 FROM users 
                 WHERE username = ? OR email = ? OR phone = ?`,
                [normalizedLogin, normalizedLogin.toLowerCase(), normalizedLogin],
                (err, row) => {
                    if (err) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`);
                        return reject(err);
                    }
                    resolve(row);
                }
            );
        });

        if (!user) {
            logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${normalizedLogin}`);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        if (!user.is_active) {
            logger.warn(`‚ùå –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${normalizedLogin}`);
            return res.status(403).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' });
        }

        if (!user.is_verified) {
            logger.warn(`‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${normalizedLogin}`);
            return res.status(403).json({
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                needs_verification: true,
                contact: user.email || user.phone
            });
        }

        const passwordMatch = await bcrypt.compare(password_hash, user.password_hash);

        if (!passwordMatch) {
            logger.warn(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${normalizedLogin}`);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        const token = jwt.sign(
            {
                id: user.id,
                username: user.username,
                email: user.email,
                phone: user.phone,
                role: user.role
            },
            process.env.JWT_SECRET || 'supersecretkey123',
            JWT_CONFIG
        );

        logger.info(`üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É: ${normalizedLogin}`);

        res.json({
            success: true,
            token,
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                phone: user.phone,
                role: user.role,
                is_verified: user.is_verified
            }
        });

    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${err.message}`);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// === –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã ===
module.exports = {
    router,
    authenticateToken
};