const express = require('express');
const db = require('../db');
const axios = require('axios');
require('dotenv').config();

const router = express.Router();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
router.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('Cache-Control', 'no-store');
  next();
});

// === –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===
router.get('/', async (req, res) => {
  console.log('‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      console.warn('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    await checkAndUpdateResults();

    // 3. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –º–∞—Ç—á–∞–º
    console.log('üìä –†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const analyticsData = await calculateUserAnalytics();

    if (!analyticsData.length) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return res.status(404).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }

    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${analyticsData.length} –∑–∞–ø–∏—Å–µ–π`);
    return res.json(analyticsData);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–æ—É—Ç–µ:', err.message);
    return res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      ...(process.env.NODE_ENV === 'development' && { details: err.message })
    });
  }
});

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

async function checkAndUpdateResults() {
  try {
    const lastUpdate = await new Promise((resolve, reject) => {
      db.get('SELECT updated_at FROM results ORDER BY updated_at DESC LIMIT 1', (err, row) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err.message);
          reject(err);
        } else {
          resolve(row?.updated_at);
        }
      });
    });

    const oneHourAgo = new Date(Date.now() - 3600000);
    const needsUpdate = !lastUpdate || new Date(lastUpdate) < oneHourAgo;

    if (needsUpdate) {
      console.log('üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      await updateMatchResults();
    } else {
      console.log('üïí –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err.message);
    throw err;
  }
}

async function calculateUserAnalytics() {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = await new Promise((resolve, reject) => {
      db.all(`
        SELECT DISTINCT username 
        FROM predictions 
        WHERE username IS NOT NULL 
        AND username != ''
        AND TRIM(username) != ''
      `, (err, rows) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err.message);
          reject(err);
        } else {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ë–î –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ NULL
          resolve(rows
            .map(row => row.username)
            .filter(username => username && username.trim() !== '')
          );
        }
      });
    });

    if (!users.length) {
      console.warn('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏');
      return [];
    }

    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    const statsPromises = users.map(username => getUserStats(username));
    return (await Promise.all(statsPromises)).filter(Boolean); // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ undefined
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', err.message);
    throw err;
  }
}

async function getUserStats(username) {
  console.log(`üìä –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${username}`);
  if (!username || username.trim() === '') {
    console.warn(`‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return null; // –í–µ—Ä–Ω–µ–º null, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –º–∞—Ç—á–∞–º
    const predictions = await new Promise((resolve, reject) => {
      const query = `
  SELECT p.match_id, p.forecast, r.home_goals, r.away_goals
  FROM predictions p
  JOIN results r ON p.match_id = r.match_id
  WHERE p.username = ? 
  AND p.username IS NOT NULL
  AND p.username != ''
  AND r.home_goals IS NOT NULL 
  AND r.away_goals IS NOT NULL
`;
      
      db.all(query, [username], (err, rows) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è ${username}:`, err.message);
          reject(err);
        } else {
          resolve(rows || []);
        }
      });
    });

    const stats = {
      username,
      totalPredictions: 0, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
      finishedPredictions: predictions.length, // –¢–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –º–∞—Ç—á–∞–º
      correct: 0,
      partial: 0,
      wrong: 0,
      accuracyPercentage: 0,
      rating: 0
    };

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const totalCount = await new Promise((resolve, reject) => {
      db.get('SELECT COUNT(*) as count FROM predictions WHERE username = ?', [username], (err, row) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è ${username}:`, err.message);
          reject(err);
        } else {
          resolve(row?.count || 0);
        }
      });
    });

    stats.totalPredictions = totalCount;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
    predictions.forEach(pred => {
      const { home_goals, away_goals, forecast } = pred;
      const [userHome, userAway] = forecast.split(':').map(Number);
      
      if (userHome === home_goals && userAway === away_goals) {
        stats.correct++;
      } else {
        const userOutcome = Math.sign(userHome - userAway);
        const actualOutcome = Math.sign(home_goals - away_goals);
        if (userOutcome === actualOutcome) {
          stats.partial++;
        } else {
          stats.wrong++;
        }
      }
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –º–∞—Ç—á–∞–º
    if (stats.finishedPredictions > 0) {
      stats.accuracyPercentage = Math.round(
        ((stats.correct + stats.partial) / stats.finishedPredictions) * 100
      );
      stats.rating = stats.correct * 3 + stats.partial;
    }

    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${username} –≥–æ—Ç–æ–≤–∞`);
    return stats;
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${username}:`, err.message);
    return {
      username,
      totalPredictions: 0,
      finishedPredictions: 0,
      correct: 0,
      partial: 0,
      wrong: 0,
      accuracyPercentage: 0,
      rating: 0
    };
  }
}

async function updateMatchResults() {
  console.log('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π');
  
  try {
    const unfinishedMatches = await new Promise((resolve, reject) => {
      db.all(`
        SELECT DISTINCT p.match_id, m.homeTeam, m.awayTeam 
        FROM predictions p
        LEFT JOIN results r ON p.match_id = r.match_id
        LEFT JOIN matches m ON p.match_id = m.match_id
        WHERE r.home_goals IS NULL OR r.away_goals IS NULL
      `, (err, rows) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π:', err.message);
          reject(err);
        } else {
          resolve(rows || []);
        }
      });
    });

    if (!unfinishedMatches.length) {
      console.log('‚úÖ –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${unfinishedMatches.length} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
    const apiKey = process.env.API_KEY_SSTATS;
    
    if (!apiKey) {
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API_KEY_SSTATS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    let updatedCount = 0;
    
    for (const match of unfinishedMatches) {
      try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${match.match_id} (${match.homeTeam} vs ${match.awayTeam})`);
        
        const response = await axios.get(`https://api.sstats.net/games/${match.match_id}`, {
          params: { apikey: apiKey },
          timeout: 10000
        });

        if (response.data?.status === 'OK') {
          const game = response.data.data.game;
          
          if (game.homeResult !== null && game.awayResult !== null) {
            await new Promise((resolve, reject) => {
              db.run(`
                INSERT OR REPLACE INTO results 
                (match_id, home_goals, away_goals, updated_at)
                VALUES (?, ?, ?, CURRENT_TIMESTAMP)
              `, [match.match_id, game.homeResult, game.awayResult], (err) => {
                if (err) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ ${match.match_id}:`, err.message);
                  reject(err);
                } else {
                  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ ${match.match_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
                  updatedCount++;
                  resolve();
                }
              });
            });
          }
        }
      } catch (err) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞ ${match.match_id}:`, err.message);
      }
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π`);
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', err.message);
    throw err;
  }
}

module.exports = router;