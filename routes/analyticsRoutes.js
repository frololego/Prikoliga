// routes/analyticsRoutes.js

const express = require('express');
const db = require('config/db');
const axios = require('axios');
const logger = require('logger');
require('dotenv').config();

const router = express.Router();

// === Middleware –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ===
router.use((req, res, next) => {
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Cache-Control', 'no-store');
    next();
});

// === –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===
router.get('/', async (req, res) => {
    logger.info('‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω');

    try {
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            logger.warn('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
        }

        logger.debug('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
        await checkAndUpdateResults();

        logger.debug('üìä –†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const analyticsData = await calculateUserAnalytics();

        if (!analyticsData.length) {
            logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return res.status(404).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
        }

        logger.info(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${analyticsData.length} –∑–∞–ø–∏—Å–µ–π`);
        return res.json(analyticsData);

    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–æ—É—Ç–µ: ${err.message}`);
        return res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            ...(process.env.NODE_ENV === 'development' && { details: err.message })
        });
    }
});

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

async function checkAndUpdateResults() {
    try {
        const lastUpdate = await new Promise((resolve, reject) => {
            db.get('SELECT updated_at FROM results ORDER BY updated_at DESC LIMIT 1', (err, row) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${err.message}`);
                    return reject(err);
                }
                resolve(row?.updated_at);
            });
        });

        const oneHourAgo = new Date(Date.now() - 3600000);
        const needsUpdate = !lastUpdate || new Date(lastUpdate) < oneHourAgo;

        if (needsUpdate) {
            logger.info('üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            await updateMatchResults();
        } else {
            logger.info('üïí –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
    } catch (err) {
        logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${err.message}`);
        throw err;
    }
}

async function calculateUserAnalytics() {
    try {
        logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

        const users = await new Promise((resolve, reject) => {
            db.all(`
                SELECT DISTINCT username 
                FROM predictions 
                WHERE username IS NOT NULL 
                AND username != ''
                AND TRIM(username) != ''
            `, (err, rows) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${err.message}`);
                    return reject(err);
                }

                resolve(rows
                    .map(row => row.username)
                    .filter(username => username && username.trim() !== '')
                );
            });
        });

        if (!users.length) {
            logger.warn('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏');
            return [];
        }

        logger.info(`üìù –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        const statsPromises = users.map(username => getUserStats(username));
        return (await Promise.all(statsPromises)).filter(Boolean);
    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${err.message}`);
        throw err;
    }
}

async function getUserStats(username) {
    logger.debug(`üìä –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${username}`);

    if (!username || username.trim() === '') {
        logger.warn(`‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return null;
    }

    try {
        // –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –º–∞—Ç—á–∞–º
        const predictions = await new Promise((resolve, reject) => {
            const query = `
                SELECT p.match_id, p.forecast, r.home_goals, r.away_goals
                FROM predictions p
                JOIN results r ON p.match_id = r.match_id
                WHERE p.username = ? 
                  AND p.username IS NOT NULL
                  AND p.username != ''
                  AND r.home_goals IS NOT NULL 
                  AND r.away_goals IS NOT NULL
            `;

            db.all(query, [username], (err, rows) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è ${username}: ${err.message}`);
                    return reject(err);
                }
                resolve(rows || []);
            });
        });

        const stats = {
            username,
            totalPredictions: 0,
            finishedPredictions: predictions.length,
            correct: 0,
            partial: 0,
            wrong: 0,
            accuracyPercentage: 0,
            rating: 0
        };

        const totalCount = await new Promise((resolve, reject) => {
            db.get('SELECT COUNT(*) as count FROM predictions WHERE username = ?', [username], (err, row) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è ${username}: ${err.message}`);
                    return reject(err);
                }
                resolve(row?.count || 0);
            });
        });

        stats.totalPredictions = totalCount;

        predictions.forEach(pred => {
            const { home_goals, away_goals, forecast } = pred;
            const [userHome, userAway] = forecast.split(':').map(Number);

            if (userHome === home_goals && userAway === away_goals) {
                stats.correct++;
            } else {
                const userOutcome = Math.sign(userHome - userAway);
                const actualOutcome = Math.sign(home_goals - away_goals);
                if (userOutcome === actualOutcome) {
                    stats.partial++;
                } else {
                    stats.wrong++;
                }
            }
        });

        if (stats.finishedPredictions > 0) {
            stats.accuracyPercentage = Math.round(
                ((stats.correct + stats.partial) / stats.finishedPredictions) * 100
            );
            stats.rating = stats.correct * 3 + stats.partial;
        }

        logger.info(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${username} –≥–æ—Ç–æ–≤–∞`);
        return stats;

    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${username}: ${err.message}`);
        return {
            username,
            totalPredictions: 0,
            finishedPredictions: 0,
            correct: 0,
            partial: 0,
            wrong: 0,
            accuracyPercentage: 0,
            rating: 0
        };
    }
}

async function updateMatchResults() {
    logger.info('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π');

    try {
        const unfinishedMatches = await new Promise((resolve, reject) => {
            db.all(`
                SELECT DISTINCT p.match_id, m.homeTeam, m.awayTeam 
                FROM predictions p
                LEFT JOIN results r ON p.match_id = r.match_id
                LEFT JOIN matches m ON p.match_id = m.match_id
                WHERE r.home_goals IS NULL OR r.away_goals IS NULL
            `, (err, rows) => {
                if (err) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π: ${err.message}`);
                    return reject(err);
                }
                resolve(rows || []);
            });
        });

        if (!unfinishedMatches.length) {
            logger.info('‚úÖ –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }

        logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ ${unfinishedMatches.length} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π`);
        const apiKey = process.env.API_KEY_SSTATS;

        if (!apiKey) {
            logger.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API_KEY_SSTATS –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            throw new Error('API_KEY_SSTATS –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }

        let updatedCount = 0;

        for (const match of unfinishedMatches) {
            try {
                logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${match.match_id} (${match.homeTeam} vs ${match.awayTeam})`);

                const response = await axios.get(`https://api.sstats.net/games/${match.match_id}`,  {
                    params: { apikey: apiKey },
                    timeout: 10000
                });

                if (response.data?.status === 'OK') {
                    const game = response.data.data.game;

                    if (game.homeResult !== null && game.awayResult !== null) {
                        await new Promise((resolve, reject) => {
                            db.run(`
                                INSERT OR REPLACE INTO results 
                                (match_id, home_goals, away_goals, updated_at)
                                VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                            `, [match.match_id, game.homeResult, game.awayResult], (err) => {
                                if (err) {
                                    logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ ${match.match_id}: ${err.message}`);
                                    return reject(err);
                                }

                                logger.info(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞ ${match.match_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`);
                                updatedCount++;
                                resolve();
                            });
                        });
                    }
                }
            } catch (err) {
                logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞ ${match.match_id}: ${err.message}`);
            }
        }

        logger.info(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π`);
    } catch (err) {
        logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${err.message}`);
        throw err;
    }
}

module.exports = router;