const fetch = require('node-fetch');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–∏–≥
async function fetchLeagues() {
    const API_KEY = '75kwgw7361l0l1ir'; // –ü—É–±–ª–∏—á–Ω—ã–π API-–∫–ª—é—á

    try {
        console.log("üöÄ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏–≥...");
        const response = await fetch('https://api.sstats.net/leagues',  {
            headers: { 'apikey': API_KEY }
        });

        if (!response.ok) {
            throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
        }

        const data = await response.json();
        if (data.status !== 'OK') {
            throw new Error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–≥");
        }

        console.log("‚ö°Ô∏è –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏–≥:");
        data.data.forEach(league => {
            console.log(`‚Ä¢ ID: ${league.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: ${league.name} (${league.country.name})`);
            league.seasons.forEach(season => {
                console.log(`  - –°–µ–∑–æ–Ω: ${season.year} (${new Date(season.dateStart).toLocaleDateString('ru-RU')} ‚Äî ${new Date(season.dateEnd).toLocaleDateString('ru-RU')})`);
            });
        });

        // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        const targetLeagues = ['Champions League', 'Europa League', 'Conference League'];
        const filteredLeagues = data.data.filter(league => 
            targetLeagues.includes(league.name) || 
            targetLeagues.some(name => league.name.toLowerCase().includes(name.toLowerCase()))
        );

        console.log("\n‚≠êÔ∏è –¢—É—Ä–Ω–∏—Ä—ã UEFA:");
        filteredLeagues.forEach(league => {
            console.log(`‚Ä¢ ID: ${league.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: ${league.name}`);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
const fs = require('fs');

fs.writeFile('leagues.json', JSON.stringify(data.data, null, 2), err => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err.message);
    } else {
        console.log('‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ª–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª leagues.json');
    }
});
}

fetchLeagues();