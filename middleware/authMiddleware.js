// middleware/authMiddleware.js

const jwt = require('jsonwebtoken');
const logger = require('logger');

const revokedTokens = new Set(); // –î–ª—è –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (in-memory)

function authenticateToken(req, res, next) {
    const authHeader = req.headers.authorization;

    logger.debug(`üì° –ó–∞–ø—Ä–æ—Å –∫: ${req.url}`);

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        logger.warn('‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization');
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    const token = authHeader.split(' ')[1];
    logger.debug(`üóùÔ∏è –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: ${token}`);

    if (revokedTokens.has(token)) {
        logger.warn('üö´ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–æ–∑–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
        return res.status(403).json({ error: '–¢–æ–∫–µ–Ω –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'supersecretkey123');
        logger.info(`üîì –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: ${decoded.username}`);
        req.user = decoded;
        next();
    } catch (e) {
        logger.error(`üö´ –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${e.message}`);
        res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
}

function requireVerified(req, res, next) {
    if (!req.user || !req.user.is_verified) {
        logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email: ${req.user?.username}`);
        return res.status(403).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email' });
    }
    next();
}

function revokeToken(token) {
    if (token) {
        revokedTokens.add(token);
        logger.debug(`üö´ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö`);
    }
}

module.exports = { authenticateToken, requireVerified, revokeToken };