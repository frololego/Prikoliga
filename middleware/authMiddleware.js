// middleware/authMiddleware.js
const jwt = require('jsonwebtoken');

const revokedTokens = new Set(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function authenticateToken(req, res, next) {
    const authHeader = req.headers.authorization;

    console.log("üì° –ó–∞–ø—Ä–æ—Å –∫:", req.url);
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        console.warn("‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization");
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    const token = authHeader.split(' ')[1];
    console.log("üóùÔ∏è –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:", token);

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'supersecretkey123');
        console.log("üîì –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:", decoded);
        req.user = decoded;
        next();
    } catch (e) {
        console.error("üö´ –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", e.message);
        res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
function requireVerified(req, res, next) {
    if (!req.user || !req.user.is_verified) {
        return res.status(403).json({ error: '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email' });
    }
    next();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
function revokeToken(token) {
    if (token) {
        revokedTokens.add(token);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
    authenticateToken,
    requireVerified,
    revokeToken
};
